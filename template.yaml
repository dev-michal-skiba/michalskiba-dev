AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for a Lambda function with API Gateway

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - Local
      - Production
  AuthSecretKey:
    Type: String
    NoEcho: true
  HostHeaderInjectionSecretKey:
    Type: String
    NoEcho: true

Mappings:
  EnvVariables:
    Local:
      CookieTemplate: "access_token={}; HttpOnly; SameSite=Lax; Path=/api/demo"
    Production:
      CookieTemplate: "access_token={}; Secure; HttpOnly; SameSite=Lax; Path=/api/demo"

Resources:
  Core:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: core
      ContentUri: ./modules/core/src
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  SqlInjection:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      CodeUri: ./modules/sql_injection/src
      Handler: sql_injection.lambda_function.lambda_handler
      Layers:
        - !Ref Core
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: ANY
            Path: /api/demo/sql-injection/{proxy+}
      Environment:
        Variables:
          DB_PATH: sql_injection/data.db
  Auth:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      CodeUri: ./modules/auth/src
      Handler: auth.lambda_function.lambda_handler
      MemorySize: 512
      Layers:
        - !Ref Core
      Events:
        LoginApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: POST
            Path: /api/demo/auth/login
        LogoutApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: POST
            Path: /api/demo/auth/logout
      Environment:
        Variables:
          DB_PATH: auth/data.db
          COOKIE_TEMPLATE: !FindInMap
            - EnvVariables
            - !Ref Environment
            - CookieTemplate
          SECRET_KEY: !Ref AuthSecretKey
  WebParameterTampering:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      CodeUri: ./modules/web_parameter_tampering/src
      Handler: web_parameter_tampering.lambda_function.lambda_handler
      Layers:
        - !Ref Core
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: GET
            Path: /api/demo/web-parameter-tampering
            Auth:
              Authorizer: CustomAuthorizer
      Environment:
        Variables:
          DB_PATH: web_parameter_tampering/data.db
  HostHeaderInjection:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      CodeUri: ./modules/host_header_injection/src
      Handler: host_header_injection.lambda_function.lambda_handler
      Layers:
        - !Ref Core
      Events:
        PasswordResetInitiateApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: POST
            Path: /api/demo/host-header-injection/password-reset/initiate
        PasswordResetCompleteApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: POST
            Path: /api/demo/host-header-injection/password-reset/complete
      Environment:
        Variables:
          SECRET_KEY: !Ref HostHeaderInjectionSecretKey
          ENVIRONMENT: !Ref Environment
  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          CustomAuthorizer:
            AuthorizerPayloadFormatVersion: "2.0"
            EnableFunctionDefaultPermissions: true
            EnableSimpleResponses: true
            FunctionArn:
              Fn::GetAtt:
                - Auth
                - Arn
