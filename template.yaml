AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for a Lambda function with API Gateway

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - Local
      - Production
  AuthSecretKey:
    Type: String
    NoEcho: true
  HostHeaderInjectionSecretKey:
    Type: String
    NoEcho: true
  Subdomain:
    Type: String
    Default: ""
  Domain:
    Type: String
  CertificateArn:  # Certificate must be created and validated manually in us-east-1
    Type: String
    Default: ""
  SentryDsn:
    Type: String
    NoEcho: true
    Default: ""

Mappings:
  EnvVariables:
    Local:
      CookieTemplate: "access_token={}; HttpOnly; SameSite=Lax; Path=/api/demo"
    Production:
      CookieTemplate: "access_token={}; Secure; HttpOnly; SameSite=Lax; Path=/api/demo"

Resources:
  SharedLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}/shared'
      RetentionInDays: 30
  SharedLambdaLogGroupPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt SharedLambdaLogGroup.Arn
  Core:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: core
      ContentUri: ./modules/core/src
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12
  SqlInjection:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      CodeUri: ./modules/sql_injection/src
      Handler: sql_injection.lambda_function.lambda_handler
      Layers:
        - !Ref Core
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: ANY
            Path: /api/demo/sql-injection/{proxy+}
      Environment:
        Variables:
          DB_PATH: sql_injection/data.db
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          LOG_GROUP_NAME: !Ref SharedLambdaLogGroup
      Policies:
        - !Ref SharedLambdaLogGroupPolicy
  Auth:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      CodeUri: ./modules/auth/src
      Handler: auth.lambda_function.lambda_handler
      MemorySize: 512
      Layers:
        - !Ref Core
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: ANY
            Path: /api/demo/auth/{proxy+}
      Environment:
        Variables:
          DB_PATH: auth/data.db
          COOKIE_TEMPLATE: !FindInMap
            - EnvVariables
            - !Ref Environment
            - CookieTemplate
          SECRET_KEY: !Ref AuthSecretKey
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          LOG_GROUP_NAME: !Ref SharedLambdaLogGroup
      Policies:
        - !Ref SharedLambdaLogGroupPolicy
  WebParameterTampering:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      CodeUri: ./modules/web_parameter_tampering/src
      Handler: web_parameter_tampering.lambda_function.lambda_handler
      Layers:
        - !Ref Core
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: GET
            Path: /api/demo/web-parameter-tampering/{proxy+}
            Auth:
              Authorizer: CustomAuthorizer
      Environment:
        Variables:
          DB_PATH: web_parameter_tampering/data.db
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          LOG_GROUP_NAME: !Ref SharedLambdaLogGroup
      Policies:
        - !Ref SharedLambdaLogGroupPolicy
  HostHeaderInjection:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      CodeUri: ./modules/host_header_injection/src
      Handler: host_header_injection.lambda_function.lambda_handler
      Layers:
        - !Ref Core
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: ANY
            Path: /api/demo/host-header-injection/{proxy+}
      Environment:
        Variables:
          SECRET_KEY: !Ref HostHeaderInjectionSecretKey
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          DOMAIN: !Ref Domain
          LOG_GROUP_NAME: !Ref SharedLambdaLogGroup
      Policies:
        - !Ref SharedLambdaLogGroupPolicy
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}'
      RetentionInDays: 30
  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn
  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "routeKey":"$context.routeKey", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength", "path":"$context.path", "error.message":"$context.error.message" }'
      Auth:
        Authorizers:
          CustomAuthorizer:
            AuthorizerPayloadFormatVersion: "2.0"
            EnableFunctionDefaultPermissions: true
            EnableSimpleResponses: true
            FunctionArn:
              Fn::GetAtt:
                - Auth
                - Arn
  StaticFilesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-static-${AWS::AccountId}-${AWS::Region}'
  StaticFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'StaticFilesBucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: s3:GetObject
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Effect: Allow
            Resource: !Sub '${StaticFilesBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt StaticFilesBucket.DomainName
            Id: S3Origin
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig: {}
          - DomainName: !Sub '${Api}.execute-api.${AWS::Region}.amazonaws.com'
            Id: ApiOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !Ref Domain
          - !Sub "${Subdomain}.${Domain}"
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt AddIndexHtmlFunction.FunctionARN
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac  # Managed-AllViewerExceptHostHeader
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt AddXForwardedHostFunction.FunctionARN
        HttpVersion: 'http2'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
      Tags:
        - Key: Name
          Value: michalskiba-dev
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub
          - michalskiba-dev-static-site-${guid}
          - guid: !Select [2, !Split ['/', !Ref 'AWS::StackId']]
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  AddIndexHtmlFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub '${AWS::StackName}-add-index-html'
      FunctionCode: |
        function handler(event) {
            var request = event.request;
            var uri = request.uri;
            if (uri.endsWith('/')) {
                request.uri += 'index.html';
            } else if (!uri.includes('.')) {
                request.uri += '/index.html';
            }
            return request;
        }
      AutoPublish: true
      FunctionConfig:
        Comment: !Sub '${AWS::StackName}: Add index.html to the request if it is missing'
        Runtime: cloudfront-js-2.0
  AddXForwardedHostFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub '${AWS::StackName}-add-x-forwarded-host'
      FunctionCode: |
        function handler(event) {
            var request = event.request;
            if (request.headers['host'] && !request.headers['x-forwarded-host']) {
                request.headers['x-forwarded-host'] = request.headers['host'];
            }
            return request;
        }
      AutoPublish: true
      FunctionConfig:
        Comment: !Sub '${AWS::StackName}: Add X-Forwarded-Host header from Host'
        Runtime: cloudfront-js-2.0
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref Domain
      HostedZoneConfig:
        Comment: !Sub "Hosted zone for ${Domain}"
  RootDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref Domain
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront's hosted zone ID (this is a constant value)
        EvaluateTargetHealth: false
  SubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub "${Subdomain}.${Domain}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt CloudFrontDistribution.DomainName

Outputs:
  StaticFilesBucketName:
    Description: Name of the S3 bucket for static files
    Value: !Ref StaticFilesBucket
    Export:
      Name: StaticFilesBucketName
  CloudFrontDistributionId:
    Description: ID of the CloudFront distribution
    Value: !Ref CloudFrontDistribution
    Export:
      Name: CloudFrontDistributionId
